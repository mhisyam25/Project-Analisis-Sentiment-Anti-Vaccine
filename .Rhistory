unnest_tokens(word, stripped_text) %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("bing")) %>%
count(word,sentiment, sort = TRUE) %>%
ungroup() %>%
#buat kolom "skor", yang menetapkan -1 untuk semua kata negatif,
#dan 1 untuk kata positif
mutate(
score = case_when(
sentiment == 'negative'~n*(-1),
sentiment == 'positive'~n*1)
)
#menghitung total score
sent.score = case_when(
nrow(twt_tbl)==0~0, #jika tidak ada kata, skor adalah 0
nrow(twt_tbl)>0~sum(twt_tbl$score) #selainnya, jumlah positif dan negatif
)
#untuk melacak tweet mana yang tidak mengandung kata sama sekali dari daftar bing
zero.type = case_when(
nrow(twt_tbl)==0~"Type 1", #Type 1: tidak ada kata sama sekali, zero = no
nrow(twt_tbl)>0~"Type 2" #Type 2: nol berarti jumlah kata = 0
)
list(score = sent.score, type = zero.type, twt_tbl = twt_tbl)
}
#menerapkan fungsi
#Fungsi lapply mengembalikan list semua skor sentimen, jenis, dan tabel tweet
kata_sent = lapply(kata$text, function(x){sentiment_bing(x)})
kata_sent
#membuat tibble yang menentukan kata, skor, dan jenisnya
kata_sentiment = bind_rows(tibble(kata = 'vaksin',
score = unlist(map(kata_sent, 'score')),
type = unlist(map(kata_sent, 'type'))))
#kita dapat melihat beberapa karakteristik sentimen di setiap kelompok.
#Berikut adalah histogram sentimen tweet.
ggplot(kata_sentiment, aes(x=score, fill = kata)) +
geom_histogram(bins = 15, alpha= .6) + facet_grid(~kata) + theme_bw()
#wordcloud
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
bing_kata
Cleaned_tweets.Kata
cleaned_tweets.Kata
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabpanel("Freq Word", plotOutput('freq')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabPanel("Freq Word", plotOutput('freq')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabPanel("Freq Word", plotOutput('freq')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabPanel("Freq Word", plotOutput('freq')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", weight = "900px"))
runApp('project.R')
library(shiny)
#script ui
ui = fluidPage(
#apllication tittle
titlePanel("dsadsadsadsa"),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Data Asli", DT::dataTableOutput('tb1')),
tabPanel("Data bersih", DT::dataTableOutput('tb2')),
tabPanel("Scatterplot", plotOutput('asPlot')),
tabPanel("Freq Word", plotOutput('freq')),
tabPanel("worldcloud", plotOutput('wordcl')),
)
)
)
#script server
server <- function(input, output, session){
as_data <- reactive({
input$update
isolate({
withProgress({
setProgress(message = "dasdsadsa")
as_file <- input$as
if(!is.null(as_file)){
as_text <- readLines(as_file$datapath)
}
else{
as_text <- "safsafsa"
}
})
})
})
barplot_rep <- repeatable(barplot)
#Menampilkan grafik sentimen
output$asPlot <- renderPlot({ withProgress({
setProgress(message = "Creating barplot...")
barplot(colSums(s),col = rainbow(10),ylab = 'count', main = 'dsadsadsada')
})})
#Menampilkan grafik sentimen
output$tb1 <- DT::renderDataTable({
DT::datatable(kata, options = list(lengthchange = FALSE))
})
#Menampilkan grafik sentimen
output$tb2 <- DT::renderDataTable({
DT::datatable(cleaned_vaksin_data, options = list(lengthchange = FALSE))
})
#Menampilkan grafik freq word
output$freq <- renderPlot({
cleaned_tweets.Kata %>%
count(word, sort = TRUE) %>%
top_n(20) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(x=word, y = n)) +
geom_col() +
coord_flip() +
theme_classic() +
labs(x="Count",
y="Unique word",
tittle="Unique word counts found in vaksin Tweets")
})
#Menampilkan grafik sentimen
output$wordcl <- renderPlot({
wordcloud(words = bing_kata$word, freq = bing_kata$n, min.freq = 1,
max.words=125, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
})
}
#menjalankan shiny
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", width = "900px"))
shiny::shinyApp(ui = ui, server = server, options = list(height = "600px", width = "600px"))
shinyApp(ui = ui, server = server, options = list(height = "600px", width = "600px"))
runApp('project.R')
